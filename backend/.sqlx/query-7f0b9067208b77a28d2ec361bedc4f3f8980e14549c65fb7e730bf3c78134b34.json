{
  "db_name": "PostgreSQL",
  "query": "\n        WITH RECURSIVE\n        -- First get all nodes associated with individuals in the given state\n        state_nodes AS (\n            SELECT DISTINCT unnest(nodes) as node_id\n            FROM individuals i\n            WHERE EXISTS (\n                SELECT 1 FROM hexagons h\n                WHERE h.state_id = $1\n            )\n        ),\n        -- Then recursively find all edges connecting to ancestral nodes\n        edge_hierarchy AS (\n            -- Base case: edges directly connected to nodes from individuals in the state\n            SELECT DISTINCT e.id as edge_id, e.parent, e.child\n            FROM edges e\n            INNER JOIN state_nodes sn\n            ON e.child = sn.node_id\n\n            UNION\n\n            -- Recursive case: find edges connected to parent nodes\n            SELECT e.id as edge_id, e.parent, e.child\n            FROM edges e\n            INNER JOIN edge_hierarchy eh\n            ON e.child = eh.parent\n        )\n        -- Finally, get all geo_arg entries for these edges\n        SELECT\n            g.edge_id,\n            g.state_id,\n            g.time\n        FROM geo_arg g\n        INNER JOIN edge_hierarchy eh ON g.edge_id = eh.edge_id\n        ORDER BY g.edge_id, g.time\n        ",
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "edge_id",
        "type_info": "Int4"
      },
      {
        "ordinal": 1,
        "name": "state_id",
        "type_info": "Int4"
      },
      {
        "ordinal": 2,
        "name": "time",
        "type_info": "Float8"
      }
    ],
    "parameters": {
      "Left": [
        "Int4"
      ]
    },
    "nullable": [
      false,
      false,
      false
    ]
  },
  "hash": "7f0b9067208b77a28d2ec361bedc4f3f8980e14549c65fb7e730bf3c78134b34"
}
